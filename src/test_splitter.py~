from textnode import TextNode, TextType
from splitter import split_nodes_images, split_nodes_links
import unittest

class TestSplitter(unittest.TestCase):
    def test_no_image_link_split(self):
        node = TextNode("Just plain text", TextType.NORMAL)
        nodes = split_nodes_images([node])
        nodes += split_nodes_links([node])
        self.assertEqual(len(nodes), 1)
        self.assertEqual(nodes[0].text, "Just plain text")

    def test_link(self):
        node = TextNode("Text [with a link to boot.dev](https://www.boot.dev) in it!", TextType.NORMAL)
        nodes = split_nodes_links([node])
        self.assertEqual(len(nodes), 3)
        self.assertEqual(nodes[0].text, "Text ")
        self.assertEqual(nodes[1].text, "with a link to boot.dev")
        self.assertEqual(nodes[1].url, "https://www.boot.dev")
        self.assertEqual(nodes[2].text, " in it!")
        self.assertEqual(nodes[0].text_type, TextType.NORMAL)
        self.assertEqual(nodes[1].text_type, TextType.LINK)
        self.assertEqual(nodes[2].text_type, TextType.NORMAL)

    def test_image(self):
        node = TextNode("Text ![image of a cat](https://cats.com/cat.png) in it!", TextType.NORMAL)
        nodes = split_nodes_images([node])
        self.assertEqual(len(nodes), 3)
        self.assertEqual(nodes[0].text, "Text ")
        self.assertEqual(nodes[0].text_type, TextType.NORMAL)
        self.assertEqual(nodes[1].text, "image of a cat")
        self.assertEqual(nodes[1].url, "https://cats.com/cat.png")
        self.assertEqual(nodes[1].text_type, TextType.IMAGE)
        self.assertEqual(nodes[2].text, " in it!")
        self.assertEqual(nodes[2].text_type, TextType.NORMAL)

    def test_multiple_links(self):
        node = TextNode("Opening [first](https://first.com) middle [second](https://second.com) end", TextType.NORMAL)
        nodes = split_nodes_links([node])
        self.assertEqual(len(nodes), 5)
        self.assertEqual(nodes[0].text, "Opening ")
        self.assertEqual(nodes[0].text_type, TextType.NORMAL)
        self.assertEqual(nodes[1].text, "first")
        self.assertEqual(nodes[1].url, "https://first.com")
        self.assertEqual(nodes[1].text_type, TextType.LINK)
        self.assertEqual(nodes[2].text, " middle ")
        self.assertEqual(nodes[2].text_type, TextType.NORMAL)
        self.assertEqual(nodes[3].text, "second")
        self.assertEqual(nodes[3].url, "https://second.com")
        self.assertEqual(nodes[3].text_type, TextType.LINK)
        self.assertEqual(nodes[4].text, " end")
        self.assertEqual(nodes[4].text_type, TextType.NORMAL)

    def test_image_and_link(self):
        node = TextNode("This has a [link](https://boot.dev) and an ![image](https://boot.dev/image.png) in it", TextType.NORMAL)
        nodes = split_nodes_images([node])
        nodes = split_nodes_links(nodes)
        self.assertEqual(len(nodes), 5)
        self.assertEqual(nodes[0].text, "This has a ")
        self.assertEqual(nodes[0].text_type, TextType.NORMAL)
        self.assertEqual(nodes[1].text, "link")
        self.assertEqual(nodes[1].url, "https://boot.dev")
        self.assertEqual(nodes[1].text_type, TextType.LINK)
        self.assertEqual(nodes[2].text, " and an ")
        self.assertEqual(nodes[2].text_type, TextType.NORMAL)
        self.assertEqual(nodes[3].text, "image")
        self.assertEqual(nodes[3].url, "https://boot.dev/image.png")
        self.assertEqual(nodes[3].text_type, TextType.IMAGE)
        self.assertEqual(nodes[4].text, " in it")
        self.assertEqual(nodes[4].text_type, TextType.NORMAL)

    def test_only_link(self):
        node = TextNode("[boot.dev](https://boot.dev)", TextType.NORMAL)
        nodes = split_nodes_links([node])
        self.assertEqual(len(nodes), 1)
        self.assertEqual(nodes[0].text, "boot.dev")
        self.assertEqual(nodes[0].url, "https://boot.dev")
        self.assertEqual(nodes[0].text_type, TextType.LINK)

    def test_only_image(self):
        node = TextNode("![boot.dev logo](https://boot.dev/logo.png)", TextType.NORMAL)
        nodes = split_nodes_images([node])
        self.assertEqual(len(nodes), 1)
        self.assertEqual(nodes[0].text, "boot.dev logo")
        self.assertEqual(nodes[0].url, "https://boot.dev/logo.png")
        self.assertEqual(nodes[0].text_type, TextType.IMAGE)

    def test_no_space(self):
        node = TextNode("[one](https://first.com)[two](https://second.com)", TextType.NORMAL)
        nodes = split_nodes_links([node])
        self.assertEqual(len(nodes), 2)
        self.assertEqual(nodes[0].text, "one")
        self.assertEqual(nodes[0].url, "https://first.com")
        self.assertEqual(nodes[0].text_type, TextType.LINK)
        self.assertEqual(nodes[1].text, "two")
        self.assertEqual(nodes[1].url, "https://second.com")
        self.assertEqual(nodes[1].text_type, TextType.LINK)

    def test_link_at_start(self):
        node = TextNode("[first](https://boot.dev) some text", TextType.NORMAL)
        nodes = split_nodes_links([node])
        self.assertEqual(len(nodes), 2)
        self.assertEqual(nodes[0].text, "first")
        self.assertEqual(nodes[0].url, "https://boot.dev")
        self.assertEqual(nodes[0].text_type, TextType.LINK)
        self.assertEqual(nodes[1].text, " some text")
        self.assertEqual(nodes[1].text_type, TextType.NORMAL)

    def test_link_at_end(self):
        node = TextNode("some text [last](https://boot.dev)", TextType.NORMAL)
        nodes = split_nodes_links([node])
        self.assertEqual(len(nodes), 2)
        self.assertEqual(nodes[0].text, "some text ")
        self.assertEqual(nodes[0].text_type, TextType.NORMAL)
        self.assertEqual(nodes[1].text, "last")
        self.assertEqual(nodes[1].url, "https://boot.dev")
        self.assertEqual(nodes[1].text_type, TextType.LINK)

    def test_empty_link(self):
        node = TextNode("[](https://boot.dev)", TextType.NORMAL)
        nodes = split_nodes_links([node])
        self.assertEqual(len(nodes), 1)
        self.assertEqual(nodes[0].text, "")
        self.assertEqual(nodes[0].url, "https://boot.dev")
        self.assertEqual(nodes[0].text_type, TextType.LINK)

    def test_empty_link_url(self):
        node = TextNode("[text]()", TextType.NORMAL)
        nodes = split_nodes_links([node])
        self.assertEqual(len(nodes), 1)
        self.assertEqual(nodes[0].text, "text")
        self.assertEqual(nodes[0].url, "")
        self.assertEqual(nodes[0].text_type, TextType.LINK)

    def test_malformed_link(self):
        node = TextNode("[partial link(https://boot.dev)", TextType.NORMAL)
        nodes = split_nodes_links([node])
        self.assertEqual(len(nodes), 1)
        self.assertEqual(nodes[0].text, "[partial link(https://boot.dev)")
        self.assertEqual(nodes[0].text_type, TextType.NORMAL)
